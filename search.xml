<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[NDK、JNI入门]]></title>
    <url>%2F2019%2F06%2F19%2FNDK%E3%80%81JNI%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Android NDK、JNI入门 1.背景 2.介绍 3.下载 NDK 和工具 4.配置NDK的环境变量 5.创建native相关方法 5.1 native相关方法去掉报红 6.创建c/c++文件 6.1 生成头文件 6.2 添加 c/c++文件 7.添加mk文件 7.1 添加 Android.mk文件(必加) 7.2 添加 Application.mk文件（可选） 8.编译so库文件 9.用Gradle链接c++项目 10.加载so库、运行app1.背景本来一直在做商城类的项目舒坦着，突然老板拿了一块Android的主板和芯片过来，说我们打算做一款自动售货机，从没做过这类项目的我，当时就一脸懵逼了，芯片、自动售货机，What?还好我依稀记得，这类项目是关于NDK、JNI的，于是，我来了！2.介绍 什么是NDK？ NDK全称是Native Development Kit，NDK提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。NDK集成了交叉编译器（交叉编译器需要UNIX或LINUX系统环境），并提供了相应的mk文件隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要编译”、“编译特性要求”等），就可以创建出so。 为什么使用NDK？ 代码的保护。由于apk的java层代码很容易被反编译，而C/C++库反汇难度较大。 可以方便地使用现存的开源库。大部分现存的开源库都是用C/C++代码编写的。 提高程序的执行效率。将要求高性能的应用逻辑使用C开发，从而提高应用程序的执行效率。 便于移植。用C/C++写得库可以方便在其他的嵌入式平台上再次使用。 什么是JNI？ JNI的全称是Java Native Interface，它提供了若干的API实现了Java和其他语言的通信（主要是C和C++）。 为什么使用JNI？ JNI的目的是使java方法能够调用c实现的一些函数。 安卓中的so文件是什么？ android中用到的so文件是一个c++的函数库。在android的JNI中，要先将相应的C语言打包成so库，然后导入到lib文件夹中供java调用。 3.下载 NDK 和工具为了给应用编译和调试原生代码，我们需要以下组件： Android 原生开发工具包 (NDK)：这套工具集允许您为 Android 使用 C 和 C++ 代码，并提供众多平台库，让您可以管理原生 Activity 和访问物理设备组件，例如传感器和触摸输入。 CMake：一款外部构建工具，可与 Gradle 搭配使用来构建原生库。如果您只计划使用 ndk-build，则不需要此组件。 LLDB：一种调试程序，Android Studio 使用它来调试原生代码。 我们可以在SDK 管理器安装这些组件 依次打开 Settings&gt;Appearance&amp;Behavior&gt;System Settings&gt;Android SDK&gt;SDK Tools 勾上LLDB、CMake 和 NDK进行下载 4.配置NDK的环境变量 打开File &gt; Project Structure &gt; SDK Location，选择默认NDK的路径 复制NDK的路径 右击我的电脑&gt;属性&gt;高级系统设置&gt;环境变量&gt;新建，添加一个系统变量NDK_HOME，并把刚才复制的ndk-bundle的路径填上去,记得确认。 找到Path系统变量（不需要创建），新建一个%NDK_HOME%，也就是上面NDK_HOME的变量添加进去。 在Terminal/cmd中不需要考虑路径，直接输入 ndk-build ，如出现如下内容，则表明NDK环境配置成功！（配置NDK环境前如果已经打开了Android Studio或者Cmd需要重新启动，否则可能没效果！) 5.创建native相关方法 5.1 native相关方法去掉报红取消检测即可，打开 Settings&gt;Editor&gt;Inspections&gt;Android&gt;Missing JNI function 去掉勾选。 去掉后，效果如下： 6.创建c/c++文件6.1 生成头文件 Terminal终端，通过下面命令 切换到项目xx\app\目录下。 1cd D:\Workspace\NDKFirst\app&gt; 注：由于下面的路径都比较长，我们可以右击相应的目录进行快捷复制： 根据java文件生成c的头文件， 执行如下命令 格式：javah ­d jni -encoding utf-8 ­classpath java文件夹路径 包名+类名 123javah ­d jni ­classpath D:\Workspace\NDKFirst\app\src\main\java com.brainbg.ndkfirst.NDKUtils或者javah ­d jni -encoding utf-8 ­classpath D:\Workspace\NDKFirst\app\src\main\java com.brainbg.ndkfirst.NDKUtils 其中 javah ： ­d jni ：创建jni目录 -encoding utf-8 ：指定编码格式为utf-8 ­classpath D:\Workspace\NDKFirst\app\src\main\java\ ：到java目录的路径 com.brainbg.ndkfirst.JNIUtils ：包名+类名 注：不加上-encoding utf-8，可能会提示错误: 编码GBK的不可映射字符。 执行后，收缩app目录后重新打开，会发现多了一个jni的目录，com_brainbg_ndkfirst_NDKUtils.h就是新生成的头文件。 com_brainbg_ndkfirst_NDKUtils.h内容如下：123456789101112131415161718192021/* DO NOT EDIT THIS FILE - it is machine generated */#include &lt;jni.h&gt;/* Header for class com_brainbg_ndkfirst_NDKUtils */#ifndef _Included_com_brainbg_ndkfirst_NDKUtils#define _Included_com_brainbg_ndkfirst_NDKUtils#ifdef __cplusplusextern "C" &#123;#endif/* * Class: com_brainbg_ndkfirst_NDKUtils * Method: getStringFromJNI * Signature: ()Ljava/lang/String; */JNIEXPORT jstring JNICALL Java_com_brainbg_ndkfirst_NDKUtils_getStringFromJNI (JNIEnv *, jclass);#ifdef __cplusplus&#125;#endif#endif 中间一段最为核心： 格式：Java_包名_类名_方法名 6.2 添加 c/c++文件 添加cpp文件 first.cpp123456789101112```- 添加c文件first.c```c#include &lt;jni.h&gt;#include "com_brainbg_ndkfirst_NDKUtils.h" JNIEXPORT jstring JNICALL Java_com_brainbg_ndkfirst_NDKUtils_getStringFromJNI(JNIEnv* env, jobject obj) &#123; return (*env)-&gt;NewStringUTF(env,"This is my first jni!"); &#125; 修改好的内容后，你会留意到上面还有提示：大意就是目前的c/c++文件还不属于项目中的一部分！为此，我们还需要处理build.gradle、Android.mk等文件。 7.添加mk文件7.1 添加 Android.mk文件(必加)注意mk文件里面不能添加注释，不然编译不通过。12345LOCAL_PATH := $(call my-dir)include $(CLEAR_VARS)LOCAL_MODULE := first-jniLOCAL_SRC_FILES := first.cinclude $(BUILD_SHARED_LIBRARY) 更多内容，可以直接查看：Android.mk 官方介绍 7.2 添加 Application.mk文件（可选）12APP_PLATFORM := android-16APP_ABI :=all APP_PLATFORM ：指定so库所支持最低的API APP_ABI：指定生成平台的so库 注：不添加Application.mk，会提示Android NDK: APP_PLATFORM not set. Defaulting to minimum supported version android-16. 更多内容，可以直接查看：Application.mk 官方介绍 8.编译so库文件进入app目录，执行ndk-build进行编译123cd D:\Workspace\NDKFirst\appndk-build 执行成功后，效果如下 同时项目中会得到相应的so包，其中lib为核心，obj为编译中产生的文件，可删除。 9.用Gradle链接c++项目 jni目录中右击任意文件选择Link C++ project with Gradle 其中Build System 选择ndk-build ,Project Path 选择Android.mk的路径,而后确认。 完成上面的操作后，app/build.gradle里面会出现如下代码123456789android &#123; ...... externalNativeBuild &#123; ndkBuild &#123; path file('jni/Android.mk') &#125; &#125;&#125; 当然，下次项目的话，我们直接加入上面代码也可。 10.加载so库、运行app NDKUtils.java 1234567891011121314public class NDKUtils &#123; public static final String TAG = NDKUtils.class.getSimpleName(); static &#123; try &#123; System.loadLibrary("first-jni"); //加载so库 &#125; catch (UnsatisfiedLinkError e) &#123; e.printStackTrace(); Log.e(TAG,"loadLibrary fail !"); &#125; &#125; public static native String getStringFromJNI();&#125; MainActivity.java 12345678910public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); TextView tvContent = findViewById(R.id.tv_content); tvContent.setText(NDKUtils.getStringFromJNI()); &#125;&#125; activity_main.xml 12345678910111213141516&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" tools:context=".MainActivity"&gt; &lt;TextView android:id="@+id/tv_content" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_centerInParent="true" android:text="Hello World!" /&gt;&lt;/RelativeLayout&gt; 运行后效果 到此为止，第一个关于NDK、JNI的Demo已经完成，相关文章，后续可能、应该、大概也会推出吧。 本着严谨的态度，系列文章都会保持维护状态，如果错误，可以给我留言。 参考资料 https://developer.android.google.cn/ndk/guideshttps://blog.csdn.net/young_time/article/details/80346631https://yq.aliyun.com/articles/60710?spm=a2c4e.11153940.0.0.11bc68d9CLrDix]]></content>
      <categories>
        <category>NDK</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>NDK</tag>
        <tag>JNI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[了解工作区]]></title>
    <url>%2F2019%2F03%2F07%2F%E4%BA%86%E8%A7%A3%E5%B7%A5%E4%BD%9C%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[了解工作区 Android Studio 整个工作环境及窗口工具统称为工作区，一般是由菜单栏、工具栏、导航栏、工具钮、编辑区、工具区、状态栏等组成的。我们日常的项目操作都是基于工作区完成的，所以非常有必要详细地了解下它的基本功能及其应用。 工作区 1.菜单栏 2.工具栏 3.导航栏 4.工具钮 4.1 Project项目结构 4.2 Captures 4.3 Structure代码结构 4.4 Builds Variants 4.5 Favorites 4.6 Favorites 5.编辑器 6.工具区 7.状态栏工作区打开项目后，整个工作区就是由如下的七个部分组成的 1.菜单栏整个菜单栏默认由File（文件）、Edit（编辑）、View（视图）、Navigate（导航）、Code（代码）、Analyze（分析）、Refactor（重构）、Build（构建）、Run（运行）、Tools（工具）、VCS（版本控制系统）、Window(窗口)、Help(帮助)组成。 2.工具栏3.2.0版的AS默认是没有完整地打开工具栏的，可以通过View → Toolbar打开，此外，工具钮、状态栏、导航栏也是在View中选择是否打开。 3.导航栏导航栏也称为导航路径，主要是为了方便查看该文件的路径走向，可以通过View → Navigation Bar选择是否关闭 4.工具钮4.1 Project项目结构4.2 Captures4.3 Structure代码结构4.4 Builds Variants4.5 Favorites4.6 Favorites5.编辑器 编辑区：用来进行代码编辑及提供各类编程提示。 顶部栏：用来展示各个文件的标签，可以此快速切换相应的标签页。 左侧栏：主要用来显示断点、书签、行号等关键信息。 右侧栏：主要是用来显示代码的警告、错误信息、书签标记等，可以通过点击快速跳转到对应的行，后续也可以通过偏好设置更改颜色。 底部栏：用来展示当前光标位置对应的方法名称，仅代码的文件有效。6.工具区7.状态栏]]></content>
      <categories>
        <category>手册</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码]]></title>
    <url>%2F2019%2F03%2F05%2F%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[java123456789101112131415public void writeToProto(ProtoOutputStream proto, long fieldId) &#123; final long token = proto.start(fieldId); if (mParcelledData != null) &#123; if (isEmptyParcel()) &#123; proto.write(BundleProto.PARCELLED_DATA_SIZE, 0); &#125; else &#123; proto.write(BundleProto.PARCELLED_DATA_SIZE, mParcelledData.dataSize()); &#125; &#125; else &#123; proto.write(BundleProto.MAP_DATA, mMap.toString()); &#125; proto.end(token); &#125; xml12345678910111213141516171819&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" tools:context=".MainActivity"&gt; &lt;Button android:id="@+id/btn_subscribe" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="订阅" app:layout_constraintBottom_toBottomOf="parent" app:layout_constraintLeft_toLeftOf="parent" app:layout_constraintRight_toRightOf="parent" app:layout_constraintTop_toTopOf="parent" /&gt;&lt;/android.support.constraint.ConstraintLayout&gt; c1234567891011121314151617181920212223#include&lt;bits/stdc++.h&gt;using namespace std;const int MAXN=1000005;int n,m,a[MAXN],ans,b[MAXN],cnt,ansl,ansr;inline void I(int x)&#123;if(b[x]==0)cnt++;b[x]++;&#125;//加入第x位画家的画inline void D(int x)&#123;if(b[x]==1)cnt--;b[x]--;&#125;//删除第x位画家的画int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf ("%d",&amp;a[i]); ans=n; for(int r=1,l=1;r&lt;=n;r++)&#123; I(a[r]);//首先插入a[r]的画 while(true)&#123; D(a[l]);//先删a[l]的画 if(cnt==m)l++;//如果删了没事，加l else&#123;I(a[l]);break;&#125;//删了有事，还留着 &#125; if(cnt==m&amp;&amp;r-l+1&lt;ans)ans=r-l+1,ansl=l,ansr=r; &#125; if (ansl!=0)printf ("%d %d",ansl,ansr); else printf ("1 %d",n);//输出+特判：选择任意一个≤n的区间不满足要求，则只好选择区间[1,n] return 0;&#125; java1234567891011121314151617181920212223242526272829303132// http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/app/Instrumentation.java#1578public ActivityResult execStartActivity( Context who, IBinder contextThread, IBinder token, Activity target, Intent intent, int requestCode, Bundle options) &#123; ... try &#123; ... int result = ActivityManager.getService() .startActivity(whoThread, who.getBasePackageName(), intent, intent.resolveTypeIfNeeded(who.getContentResolver()), token, target != null ? target.mEmbeddedID : null, requestCode, 0, null, options); ... &#125; catch (RemoteException e) &#123; ... &#125; return null;&#125;// http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/app/ActivityManager.java#4216public static IActivityManager getService() &#123; return IActivityManagerSingleton.get();&#125;private static final Singleton&lt;IActivityManager&gt; IActivityManagerSingleton = new Singleton&lt;IActivityManager&gt;() &#123; @Override protected IActivityManager create() &#123; final IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE); final IActivityManager am = IActivityManager.Stub.asInterface(b); return am; &#125; &#125;;]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试，Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <url>%2F2019%2F03%2F01%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[用Git上传项目到GitHubGit客户端https://gitforwindows.org/ 调出git命令窗口例如我们现在要上传一个名为MyGit的项目 1、在GitHub上创建一个名为MyGit的库 2、 在MyGit的文件目录下,右击，选择Git Bash here，输入git init 进行初始化1git init 3、配置GitHub的用户名和邮箱,告诉它，你是谁1234567查看git config user.namegit config user.email修改git config --global user.name "BieWong"git config --global user.email "1057234389@qq.com" 如果你跳过了这一步，可能就会这么提示 4、添加文件123456添加所有文件git add .添加单文件git add &lt;file&gt; 如：git add "README.md" 5、提交12git commit -m &lt;message&gt; //提交文件如：git commit -m "第一次提交" 6、连接远程地址12345git remote add origin "远程库地址" 双引号可以省略比如： git remote add origin "https://github.com/Brain-RD/MyGit.git"或 git remote add origin https://github.com/Brain-RD/MyGit.git 7、推送上仓库 1git push -u origin master 8、输入账号密码 gitignore文件Git常用命令1234注：&lt;file&gt; 表示一个文件 ，如 README.mdctrl + L //清屏ctrl + c //中断 创建版本库12git init 初始化版本库git clone "远程库地址" //克隆库到本地 查看状态12git status //查看当前状态git diff 增删改查123456git help &lt;command&gt; //显示command的help,如：git help pushgit show //显示已提交的信息git add . //添加所有文件git add &lt;file&gt; //添加单文件 查看log1234567git log //显示从最近到最远的提交日志git log --pretty=oneline //显示commit id全部id的提交日志git log --oneline //显示commit id前7位的提交日志git log &lt;file&gt; //git log -p &lt;file&gt; //git log -p -2 //查看最近两次详细修改内容的diffgit log --stat #查看提交统计信息 版本回退1234git reset --hard HEAD^ //回退到上一个版本 git reset --hard &lt;commit_id&gt; //回到指定的版本(版本号没必要写全，前几位即可)git reflog //查看历史记录的版本号id（记录你的每一次命令,不论是否已经提交,都可用来进行版本回退时，查看版本号）git status //当前状态 HEAD指向的版本就是当前版本，因此Git允许我们重新指定所有已提交的版本中的一个，使用命令git reset –hard commit_id。 想要回退到哪个版本，可用git log查看提交历史。 想要回到未来的哪个版本来，可用git reflog查看命令历史。 对比123git diff //是工作区(work dict)和暂存区(stage)的比较git diff --cached //是暂存区(stage)和分支(master)的比较git diff HEAD -- README.md //查看工作区和版本库里面最新版本的区别 撤销修改12git checkout -- &lt;file&gt; //把文件在工作区的修改全部撤销,让这个文件回到最近一次git commit或git add时的状态。git reset HEAD &lt;file&gt; //把暂存区的修改撤销掉，重新放回工作区(该文件被 git add 后，可如此撤销，再用git checkout撤销工作区的修改) 删除12git rm &lt;file&gt; //删除文件git checkout -- &lt;file&gt; //误删的文件恢复到最新版本,该命令是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 创建与合并分支1234567git branch //查看分支git branch &lt;name&gt; // 创建分支git checkout &lt;name&gt; //切换分支git checkout -b &lt;name&gt; //创建+切换分支git merge &lt;name&gt; //合并某分支到当前分支(注意是当前分支，如果分支不对会出现其他问题)git branch -d &lt;name&gt; //删除分支git branch -D &lt;name&gt; //强制删除还没合并的分支 解决冲突12345git log --graph //查看分支合并图。git log --graph --pretty=oneline --abbrev-commit //美观地展示分支合并的提交图git merge --no-ff -m "message" dev //合并某分支到当前分支，并生成新的commit//合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。 Bug分支1234567891011git stash //暂存工作区git stash list //查看储存列表git stash apply //恢复储存git stash apply stash@&#123;index&#125; //恢复指定的stashgit stash drop //默认删除stash@&#123;0&#125;的stashgit stash drop stash@&#123;index&#125;//删除指定的stashgit stash pop //恢复储存同时把储存删除掉git stash clear // 清空所有stash 多人协作123456789git remote //查看远程版本库git remote -v //更详细查看远程版本库git push origin master //推送主分支到远程库，需要指定分支如：git push origin devgit pull //拉取远程库到本地git branch --set-upstream-to=origin/&lt;branch&gt; dev //创建本地dev分支与远程origin/分支的链接关系 变基1git rebase //变基，rebase操作可以把本地未push的分叉提交历史整理成直线 标签123456789git tag &lt;name&gt; //创建一个新标签，默认标签是打在最新提交的commit上的git tag //查看所有标签git tag &lt;name&gt; &lt;commit_id&gt; //给任意一个提交打上标签git show &lt;tagname&gt; // 查看标签信息git tag -a &lt;tagname&gt; -m &lt;message&gt; &lt;commit_id&gt; //打上标签并且写上说明git tag -d &lt;tagname&gt; //删除标签git push origin &lt;tagname&gt; //推送标签到远程库git push origin --tags //一次性推送全部尚未推送到远程的本地标签git push origin :refs/tags/&lt;tagname&gt; //删除远程库里的标签 远程库123456789git remote add origin &lt;url&gt; git remote rm origin //删除远程库//同项目及关联多个远程库git remote add github &lt;url&gt; //关联Github的远程库，取名githubgit remote add gitee &lt;url&gt; //关联码云的远程库，gitee//同项目推送多个远程库git push github mastergit push gitee master 配置SSH1234561、查看个人用户的.ssh目录下有没有id_rsa和id_rsa.pub这两个文件，如果没有，则用下面的命令创建 ssh-keygen -t rsa -C "email" //生成新的SSH秘钥，注意C必须为大写的才有效2、登录GitHub，打开Settings&gt;SSH and GPG keys&gt;New SSH key，填上任意Title，在Key文本框里 粘贴 id_rsa.pub 文件的内容（用记事本打开即可）。 参考资料https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000]]></content>
      <categories>
        <category>Git</category>
        <category>Git命令</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Git命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建第一个Android项目]]></title>
    <url>%2F2019%2F03%2F01%2F%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAAndroid%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[创建第一个项目应用 选择打开”Start a new Android Studio project”，新建一个Android项目 修改相应Android项目的名称、包名、项目位置等，以符合项目要求 如果修改项目的位置后，记得把项目名称重新补上，如不修改，直接默认就好 选择开发Android设备的类型，默认是手机和平板应用的开发 打开“help me choose”，就能查看各个级别API的版本积累分布，方便开发者选择合适的API级别进行开发，默认是基于Android4.0（API 15）进行项目开发的，覆盖率达到了99%以上。 为移动端的项目添加一个新的Activity，默认选择空的Activity即可。 配置Activity，用默认的就好，不需要修改 第一次创建项目可能会这样，Finish即可 首次进入项目主界面，等待加载 首次需要安装相关的构建工具 同意相关协议，下一步，等待下载完成后，关闭即可 继续等待一小段时间后，加载完成 点击右上绿色的运行按钮，会弹出选择部署目标Android设备的窗口 这时候运行项目应用有2种选择 usb连接真机 创建模拟器 usb连接真机 打开手机的开发者选项，由于各个手机厂商的打开方式都不同，下面列出一些常用手机： 小米手机：连续点击三下”MIUI 版本” 华为手机：连续点击”版本号”多次，直到屏幕提示已进入开发者模式。 三星手机：连续快速点击多次“软件信息”按钮，直到屏幕提示已进入开发者模式。 OPPO手机：连续点击”版本号”多次 VIVO手机：连续点击”软件版本号”多次 魅族手机:连续点击”版本号”多次 锤子手机:连续点击”软件版本”多次 努比亚手机:连续点击”版本号”多次 进入开发者选项，打开USB调试，部分手机还需要打开USB安装 插入usb数据线连接，成功连接后，如图 ok运行后，如图 创建模拟器 创建新的模拟器设备 选择合适的模拟器，推荐使用1080*1920分辨率的 选择一个系统映像文件，也就是选择Android系统的版本，暂时选择8.0的，可自选，然后点击“Download”进行下载 同意协议，然后等候下载 可修改模拟器名称，直接Finish 选择模拟器，运行项目应用 等候系统启动 模拟器项目效果 真机调试和模拟器调试都可以，不过还是推荐使用真机调试，因为模拟器的配置一般没真机的好，而且很多项目应用场景是模拟器调试不了的。]]></content>
      <categories>
        <category>Android Studio 实用开发手册</category>
      </categories>
      <tags>
        <tag>实用开发手册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio 开发环境搭建]]></title>
    <url>%2F2019%2F03%2F01%2FAndroid-Studio-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Android Studio 开发环境搭建 Android Studio 开发环境搭建 1.下载JDK、AS 1.1 JDK下载 1.2 AS下载 1.3 百度云资源统一下载 2.安装JDK 3.配置JDK及JAVA的环境 3.1 打开系统环境 3.2 配置JAVA_HOME 3.3 配置CLASSPATH 3.4 编辑path 3.5 检查Java环境 4.安装Android Studio1.下载JDK、AS 1.1 JDK下载 官网站:https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 同意协议后，下载相应版本的JDK 1.2 AS下载 官方下载地址：https://developer.android.google.cn/studio/ 目前最新版是3.2.1 Android Studio 中文社区:http://www.android-studio.org/ 目前最新版是3.2.0，可以直接下载 1.3 百度云资源统一下载为了统一方便下载，以上所有资源都可在我的百度盘里下载（如果链接失效，可以及时Issues我）https://pan.baidu.com/s/1exQ3CdCH_wRnmCdRBpYq4g 2.安装JDK 安装jdk-8u202-windows-x64.exe 为了方便后续操作，这里修改为C:\Java\jdk1.8.0_202\，确定后继续下一步 直接确认，继续下一步 新建一个java文件夹后，选择该文件，确认 下一步 直接关闭即可，无需进行后续步骤 3.配置JDK及JAVA的环境3.1 打开系统环境 打开计算机的属性 打开环境变量 复制jdk的路径，也就是我们前面安装JDK时设置的路径 3.2 配置JAVA_HOME变量名：JAVA_HOME变量值：JDK安装目录（我们这里是：C:\Java\jdk1.8.0_202） 3.3 配置CLASSPATH变量名：CLASSPATH变量值：.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar; 注意：上面的开头别写漏一个”.”符号,和最后的分号”;” 3.4 编辑path变量名：path变量值：;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin; 先选择Path进行编辑，弹窗后选择编辑文本，再确认 ​ 在最后追加，再确认 最后再确认下，别白忙活 3.5 检查Java环境 键盘快捷 Win+R，打开“运行”，输入cmd 输入javac或者java，如出现下面的详细信息则说明java环境已经配置好了 4.安装Android Studio 安装的欢迎页面，下一步 选择AS的组件，默认选上Android手机模拟器 配置设置，为了方便，重新设置路径 创建AS的桌面快捷方式，默认需要 安装完成，启动 是否需要导入以前AS的配置设置，默认不需要，进入加载（如果之前用AS有保存settings的可以导入） 无法访问android sdk插件列表 我选择cancel ，进入到了安装向导，下一步 为android studio选择您想要的设置类型 选择UI的主题，推荐极客黑，护眼 SDK 组件安装，修改SDK的路径 下载组件，完成关闭掉 启动欢迎页面 好了，以上步骤就完成了整个配置Java环境及AS的安装过程，还有更多关于AS的内容，请看后续的文章。]]></content>
      <categories>
        <category>Android Studio 实用开发手册</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
</search>
